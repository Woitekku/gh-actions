name: Deploy to Amazon ECS [dynamic]

on:
  pull_request:
    branches:
      - main
    types:
      - opened
    paths:
      - 'src/**'

# This is required for GitHub to AWS authentication over OIDC
#permissions:
#  id-token: write # This is required for requesting the JWT
#  contents: read # This is required for actions/checkout

env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  PR_NUMBER: ${{ github.event.number }}


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        working-directory: ./src/hello-world-nodejs
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Fetch Amazon ECS task definition
        id: fetch-task-def
        env:
          ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query 'taskDefinition' --output json | jq 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > task-def.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECS_TASK_DEFINITION: ${{ steps.fetch-task-def.outputs.task-def }}
          ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME }}
        with:
          task-definition: task-def.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Register new Amazon ECS task definition
        env:
          ECS_TASK_DEFINITION: ${{ steps.task-def.outputs.task-definition }}
        run: |
          aws ecs register-task-definition --cli-input-json file://$ECS_TASK_DEFINITION

      - name: Create AWS target group
        id: target-group
        env:
            TARGET_GROUP_PREFIX: ${{ vars.TARGET_GROUP_PREFIX }}
            VPC_ID: ${{ vars.VPC_ID }}
        run: |
          echo "TARGET_GROUP_ARN=$(aws elbv2 create-target-group \
            --name $TARGET_GROUP_PREFIX-$PR_NUMBER \
            --protocol HTTP \
            --port 3000 \
            --target-type ip \
            --vpc-id $VPC_ID --output text | awk '{print $13}')" >> $GITHUB_OUTPUT

      - name: Create AWS load balancer listener rule
        id: listener_rule
        env:
          LOAD_BALANCER_NAME: ${{ vars.LOAD_BALANCER_NAME }}
          TARGET_GROUP_ARN: ${{ steps.target-group.outputs.TARGET_GROUP_ARN }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
        run: |
          LOAD_BALANCER_ARN=$(aws elbv2 describe-load-balancers \
            --names $LOAD_BALANCER_NAME --output text | grep LOADBALANCERS | awk '{print $6}')

          LISTENER_ARN=$(aws elbv2 describe-listeners \
            --load-balancer-arn $LOAD_BALANCER_ARN --output text | grep LISTENERS | grep HTTPS | awk '{print $2}')

          echo $PR_NUMBER
          echo $DOMAIN_NAME
          echo $PR_NUMBER.$DOMAIN_NAME
          
          aws elbv2 create-rule \
              --listener-arn $LISTENER_ARN \
              --condition '{"Field":"host-header","HostHeaderConfig":{"Values":["$PR_NUMBER.$DOMAIN_NAME"]}}' \
              --actions "Type=forward,TargetGroupArn=$TARGET_GROUP_ARN" \
              --priority $(expr 100 + $PR_NUMBER)